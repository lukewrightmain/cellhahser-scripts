{
  "id": "78cef120-c288-4623-ae93-3c58e98fbc58",
  "name": "Acurast Lite - Install/Update (Fixed)",
  "description": "Automatically downloads and installs/updates the latest Acurast Lite processor app from GitHub releases. Works on all devices in parallel using Python and ADB.",
  "category": "Custom",
  "type": "Python",
  "version": "1.1.0",
  "author": "Cellhasher User",
  "tags": [
    "python",
    "exported",
    "fixed"
  ],
  "effects": {
    "power": {
      "reboot": false,
      "shutdown": false
    },
    "security": {
      "modifiesLockScreen": false
    }
  },
  "preRunNotice": "This Python script was exported from Cellhasher My Scripts with network debugging fixes.",
  "pythonScript": "import os\nimport time\nimport subprocess\nimport tempfile\nimport urllib.request\nimport json\nimport ssl\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Get environment variables from Cellhasher\nADB = os.environ.get(\"adb_path\", \"adb\")\ndevices = os.environ.get(\"devices\", \"\").split()\n\n# GitHub API endpoint for Acurast processor releases\nGITHUB_API_URL = \"https://api.github.com/repos/Acurast/acurast-processor-update/releases/latest\"\n\n# Disable SSL verification if needed (for debugging)\nssl._create_default_https_context = ssl._create_unverified_context\n\ndef test_network_connectivity():\n    \"\"\"Test basic network connectivity\"\"\"\n    print(\"[*] Testing network connectivity...\")\n    \n    try:\n        # Test with a simple HTTP request first\n        req = urllib.request.Request(\"https://httpbin.org/get\")\n        req.add_header('User-Agent', 'Cellhasher-Acurast-Updater/1.0')\n        \n        with urllib.request.urlopen(req, timeout=30) as response:\n            print(f\"[✓] Network test successful - Status: {response.status}\")\n            return True\n    except Exception as e:\n        print(f\"[✗] Network test failed: {e}\")\n        return False\n\ndef get_latest_acurast_lite_apk():\n    \"\"\"\n    Fetch the latest Acurast Lite APK download URL from GitHub releases\n    \"\"\"\n    try:\n        print(\"[*] Fetching latest Acurast Lite release from GitHub...\")\n        print(f\"[*] API URL: {GITHUB_API_URL}\")\n        \n        # Create a request with User-Agent to avoid rate limiting\n        req = urllib.request.Request(GITHUB_API_URL)\n        req.add_header('User-Agent', 'Cellhasher-Acurast-Updater/1.0')\n        \n        print(\"[*] Making HTTP request...\")\n        with urllib.request.urlopen(req, timeout=30) as response:\n            print(f\"[✓] Response received - Status: {response.status}\")\n            release_data = json.loads(response.read().decode())\n            print(f\"[✓] Successfully parsed JSON response\")\n        \n        # Debug: print all assets\n        assets = release_data.get(\"assets\", [])\n        print(f\"[*] Found {len(assets)} assets in release:\")\n        for asset in assets:\n            print(f\"  - {asset['name']}\")\n        \n        # Find the processor-lite APK in the assets\n        for asset in assets:\n            asset_name = asset[\"name\"].lower()\n            if \"processor\" in asset_name and \"lite\" in asset_name and asset_name.endswith(\".apk\"):\n                apk_url = asset[\"browser_download_url\"]\n                apk_name = asset[\"name\"]\n                print(f\"[✓] Found matching APK: {apk_name}\")\n                print(f\"[✓] Download URL: {apk_url}\")\n                return apk_url, apk_name\n        \n        # If no exact match, try broader search\n        print(\"[!] No exact match found, trying broader search...\")\n        for asset in assets:\n            asset_name = asset[\"name\"].lower()\n            if \"processor\" in asset_name and asset_name.endswith(\".apk\"):\n                apk_url = asset[\"browser_download_url\"]\n                apk_name = asset[\"name\"]\n                print(f\"[✓] Found processor APK: {apk_name}\")\n                print(f\"[✓] Download URL: {apk_url}\")\n                return apk_url, apk_name\n        \n        print(\"[!] Available assets:\")\n        for asset in assets:\n            print(f\"  - {asset['name']} ({asset.get('size', 'unknown size')} bytes)\")\n        \n        raise Exception(\"Could not find any processor APK in latest release\")\n    \n    except urllib.error.URLError as e:\n        print(f\"[✗] Network error: {e}\")\n        if hasattr(e, 'reason'):\n            print(f\"[✗] Reason: {e.reason}\")\n        raise\n    except Exception as e:\n        print(f\"[✗] Error fetching release info: {e}\")\n        import traceback\n        traceback.print_exc()\n        raise\n\ndef download_apk(apk_url, apk_name):\n    \"\"\"\n    Download the APK to a temporary location\n    \"\"\"\n    try:\n        # Create temporary file for the APK\n        temp_dir = tempfile.gettempdir()\n        local_apk_path = os.path.join(temp_dir, apk_name)\n        \n        print(f\"[*] Downloading {apk_name}...\")\n        print(f\"[*] Saving to: {local_apk_path}\")\n        print(f\"[*] From URL: {apk_url}\")\n        \n        # Create request with User-Agent\n        req = urllib.request.Request(apk_url)\n        req.add_header('User-Agent', 'Cellhasher-Acurast-Updater/1.0')\n        \n        with urllib.request.urlopen(req, timeout=60) as response:\n            print(f\"[✓] Download started - Status: {response.status}\")\n            \n            with open(local_apk_path, 'wb') as f:\n                total_size = 0\n                while True:\n                    chunk = response.read(8192)\n                    if not chunk:\n                        break\n                    f.write(chunk)\n                    total_size += len(chunk)\n                    print(f\"[*] Downloaded {total_size} bytes...\", end='\\r')\n            \n            print(f\"\\n[✓] Downloaded successfully! Size: {total_size / (1024 * 1024):.2f} MB\")\n        \n        # Verify the file was downloaded\n        if os.path.exists(local_apk_path):\n            file_size = os.path.getsize(local_apk_path)\n            print(f\"[✓] File verified on disk: {file_size} bytes\")\n        else:\n            raise Exception(\"Downloaded file not found on disk\")\n        \n        return local_apk_path\n    \n    except Exception as e:\n        print(f\"[✗] Error downloading APK: {e}\")\n        import traceback\n        traceback.print_exc()\n        raise\n\ndef install_apk_on_device(device_id, apk_path):\n    \"\"\"\n    Install or update Acurast Lite APK on a single device using ADB\n    \"\"\"\n    try:\n        print(f\"[{device_id}] Starting Acurast Lite installation/update...\")\n        \n        # Check if APK file exists\n        if not os.path.exists(apk_path):\n            return f\"[{device_id}] Failed: APK file not found\"\n        \n        # Install the APK (adb install -r for update/replace)\n        print(f\"[{device_id}] Installing APK...\")\n        cmd = f'\"{ADB}\" -s {device_id} install -r \"{apk_path}\"'\n        print(f\"[{device_id}] Running: {cmd}\")\n        \n        result = subprocess.run(\n            cmd,\n            shell=True,\n            capture_output=True,\n            text=True,\n            timeout=120\n        )\n        \n        print(f\"[{device_id}] ADB exit code: {result.returncode}\")\n        if result.stdout:\n            print(f\"[{device_id}] ADB stdout: {result.stdout.strip()}\")\n        if result.stderr:\n            print(f\"[{device_id}] ADB stderr: {result.stderr.strip()}\")\n        \n        if result.returncode == 0 or \"Success\" in result.stdout:\n            print(f\"[{device_id}] ✓ Acurast Lite installed/updated successfully!\")\n            return f\"[{device_id}] Success\"\n        else:\n            error_msg = result.stderr or result.stdout or \"Unknown error\"\n            print(f\"[{device_id}] ✗ Installation failed: {error_msg}\")\n            return f\"[{device_id}] Failed: {error_msg}\"\n    \n    except subprocess.TimeoutExpired:\n        print(f\"[{device_id}] ✗ Installation timed out\")\n        return f\"[{device_id}] Failed: Timeout\"\n    except Exception as e:\n        print(f\"[{device_id}] ✗ Error: {e}\")\n        import traceback\n        traceback.print_exc()\n        return f\"[{device_id}] Error: {e}\"\n\ndef main():\n    \"\"\"\n    Main execution function\n    \"\"\"\n    print(\"=\" * 60)\n    print(\"    Acurast Lite - Install/Update Script (Fixed)\")\n    print(\"=\" * 60)\n    \n    if not devices:\n        print(\"[✗] No devices found in environment variable 'devices'\")\n        print(\"[!] Please select devices in Cellhasher before running this script\")\n        return\n    \n    print(f\"[*] Target devices: {len(devices)}\")\n    for idx, device in enumerate(devices, 1):\n        print(f\"    {idx}. {device}\")\n    print(f\"[*] ADB path: {ADB}\")\n    print()\n    \n    # Test network connectivity first\n    if not test_network_connectivity():\n        print(\"[✗] Network connectivity test failed. Cannot proceed.\")\n        return\n    \n    try:\n        # Step 1: Get latest APK download URL\n        print(\"\\n\" + \"=\" * 60)\n        print(\"Step 1: Fetching latest release info\")\n        print(\"=\" * 60)\n        apk_url, apk_name = get_latest_acurast_lite_apk()\n        \n        # Step 2: Download the APK\n        print(\"\\n\" + \"=\" * 60)\n        print(\"Step 2: Downloading APK\")\n        print(\"=\" * 60)\n        apk_path = download_apk(apk_url, apk_name)\n        \n        # Step 3: Install on all devices in parallel\n        print(\"\\n\" + \"=\" * 60)\n        print(f\"Step 3: Installing Acurast Lite on {len(devices)} device(s) in parallel...\")\n        print(\"=\" * 60)\n        print()\n        \n        max_workers = min(max(1, len(devices)), 10)  # Limit concurrent installations\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            future_to_device = {\n                executor.submit(install_apk_on_device, device_id, apk_path): device_id \n                for device_id in devices\n            }\n            \n            for future in as_completed(future_to_device):\n                device_id = future_to_device[future]\n                try:\n                    result = future.result()\n                    print(result)\n                except Exception as exc:\n                    print(f\"[{device_id}] Generated an exception: {exc}\")\n        \n        # Step 4: Cleanup - remove downloaded APK\n        print(\"\\n[*] Cleaning up temporary files...\")\n        if os.path.exists(apk_path):\n            try:\n                os.unlink(apk_path)\n                print(f\"[✓] Removed temporary APK: {apk_path}\")\n            except Exception as e:\n                print(f\"[!] Could not remove temp file: {e}\")\n        \n        print(\"\\n\" + \"=\" * 60)\n        print(\"[✓] Acurast Lite installation/update completed on all devices!\")\n        print(\"=\" * 60)\n    \n    except Exception as e:\n        print(f\"\\n[✗] Script failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return\n\nif __name__ == \"__main__\":\n    main()"
}
