{
  "id": "78cef120-c288-4623-ae93-3c58e98fbc58",
  "name": "Acurast Lite - Install/Update",
  "description": "Automatically downloads and installs/updates the latest Acurast Lite processor app from GitHub releases. Works on all devices in parallel using Python and ADB.",
  "category": "Custom",
  "type": "Python",
  "version": "1.0.0",
  "author": "Cellhasher User",
  "tags": [
    "python",
    "exported"
  ],
  "effects": {
    "power": {
      "reboot": false,
      "shutdown": false
    },
    "security": {
      "modifiesLockScreen": false
    }
  },
  "preRunNotice": "This Python script was exported from Cellhasher My Scripts.",
  "pythonScript": "import os\nimport time\nimport subprocess\nimport tempfile\nimport urllib.request\nimport json\nimport ssl\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Windows console encoding fix\nimport sys\nif sys.platform == 'win32':\n    try:\n        import codecs\n        sys.stdout.reconfigure(encoding='utf-8', errors='replace')\n        sys.stderr.reconfigure(encoding='utf-8', errors='replace')\n    except Exception:\n        pass  # Continue if reconfigure fails\n\n# Get environment variables from Cellhasher\nADB = os.environ.get(\"adb_path\", \"adb\")\ndevices = os.environ.get(\"devices\", \"\").split()\n\n# GitHub API endpoint for Acurast processor releases\nGITHUB_API_URL = \"https://api.github.com/repos/Acurast/acurast-processor-update/releases/latest\"\n\ndef setup_ssl_context():\n    \"\"\"\n    Setup SSL context to handle certificate verification issues\n    \"\"\"\n    try:\n        # Try to create unverified context if available (for systems with SSL issues)\n        if hasattr(ssl, '_create_unverified_context'):\n            ssl_context = ssl._create_unverified_context()\n            print(\"[â] SSL: Using unverified context\")\n            return ssl_context\n        else:\n            # Fallback to default context\n            ssl_context = ssl.create_default_context()\n            print(\"[â] SSL: Using default context\")\n            return ssl_context\n    except Exception as e:\n        print(f\"[!] SSL setup warning: {e}\")\n        # Continue without custom SSL context\n        return None\n\ndef get_latest_acurast_lite_apk():\n    \"\"\"\n    Fetch the latest Acurast Lite APK download URL from GitHub releases\n    \"\"\"\n    try:\n        print(\"[*] Fetching latest Acurast Lite release from GitHub...\")\n\n        # Setup SSL context\n        ssl_context = setup_ssl_context()\n\n        # Add timeout and user agent to avoid potential blocking\n        req = urllib.request.Request(GITHUB_API_URL, headers={'User-Agent': 'Cellhasher-Acurast-Updater/1.0'})\n\n        # Use SSL context if available\n        if ssl_context:\n            with urllib.request.urlopen(req, timeout=30, context=ssl_context) as response:\n                release_data = json.loads(response.read().decode())\n        else:\n            with urllib.request.urlopen(req, timeout=30) as response:\n                release_data = json.loads(response.read().decode())\n\n        print(f\"[â] Successfully fetched release data for tag: {release_data.get('tag_name', 'unknown')}\")\n\n        # Find the processor-lite APK in the assets (prioritize canary over devnet)\n        processor_lite_assets = []\n        for asset in release_data.get(\"assets\", []):\n            if asset[\"name\"].startswith(\"processor-lite\") and asset[\"name\"].endswith(\".apk\"):\n                processor_lite_assets.append(asset)\n\n        if not processor_lite_assets:\n            # Fallback: look for any APK with processor-lite in the name\n            for asset in release_data.get(\"assets\", []):\n                if \"processor-lite\" in asset[\"name\"].lower() and asset[\"name\"].endswith(\".apk\"):\n                    processor_lite_assets.append(asset)\n\n        if not processor_lite_assets:\n            raise Exception(\"Could not find processor-lite APK in latest release\")\n\n        # Prefer canary over devnet if both are available\n        selected_asset = None\n        for asset in processor_lite_assets:\n            if \"canary\" in asset[\"name\"].lower():\n                selected_asset = asset\n                break\n\n        if not selected_asset:\n            selected_asset = processor_lite_assets[0]\n\n        apk_url = selected_asset[\"browser_download_url\"]\n        apk_name = selected_asset[\"name\"]\n        print(f\"[â] Found latest APK: {apk_name}\")\n        print(f\"[â] Download URL: {apk_url}\")\n        return apk_url, apk_name\n\n    except Exception as e:\n        print(f\"[â] Error fetching release info: {e}\")\n        raise\n\ndef download_apk(apk_url, apk_name):\n    \"\"\"\n    Download the APK to a temporary location\n    \"\"\"\n    try:\n        # Create temporary file for the APK\n        temp_dir = tempfile.gettempdir()\n        local_apk_path = os.path.join(temp_dir, apk_name)\n        \n        print(f\"[*] Downloading {apk_name}...\")\n        print(f\"[*] Saving to: {local_apk_path}\")\n        \n        # Add user agent and timeout for better reliability\n        req = urllib.request.Request(apk_url, headers={'User-Agent': 'Cellhasher-Acurast-Updater/1.0'})\n        with urllib.request.urlopen(req, timeout=60) as response:\n            with open(local_apk_path, 'wb') as f:\n                while True:\n                    chunk = response.read(8192)\n                    if not chunk:\n                        break\n                    f.write(chunk)\n        \n        # Verify the file was downloaded\n        file_size = os.path.getsize(local_apk_path)\n        print(f\"[✓] Downloaded successfully! Size: {file_size / (1024 * 1024):.2f} MB\")\n        \n        return local_apk_path\n    \n    except Exception as e:\n        print(f\"[✗] Error downloading APK: {e}\")\n        raise\n\ndef install_apk_on_device(device_id, apk_path):\n    \"\"\"\n    Install or update Acurast Lite APK on a single device using ADB\n    \"\"\"\n    try:\n        print(f\"[{device_id}] Starting Acurast Lite installation/update...\")\n        \n        # Install the APK (adb install -r for update/replace)\n        print(f\"[{device_id}] Installing APK...\")\n        result = subprocess.run(\n            f'\"{ADB}\" -s {device_id} install -r \"{apk_path}\"',\n            shell=True,\n            capture_output=True,\n            text=True\n        )\n        \n        if result.returncode == 0 or \"Success\" in result.stdout:\n            print(f\"[{device_id}] ✓ Acurast Lite installed/updated successfully!\")\n            return f\"[{device_id}] Success\"\n        else:\n            error_msg = result.stderr or result.stdout\n            print(f\"[{device_id}] ✗ Installation failed: {error_msg}\")\n            return f\"[{device_id}] Failed: {error_msg}\"\n    \n    except Exception as e:\n        print(f\"[{device_id}] ✗ Error: {e}\")\n        return f\"[{device_id}] Error: {e}\"\n\ndef main():\n    \"\"\"\n    Main execution function\n    \"\"\"\n    print(\"=\" * 60)\n    print(\"    Acurast Lite - Install/Update Script\")\n    print(\"=\" * 60)\n    \n    if not devices:\n        print(\"[✗] No devices found in environment variable 'devices'\")\n        print(\"[!] Please select devices in Cellhasher before running this script\")\n        return\n    \n    print(f\"[*] Target devices: {len(devices)}\")\n    for idx, device in enumerate(devices, 1):\n        print(f\"    {idx}. {device}\")\n    print()\n    \n    try:\n        # Step 1: Get latest APK download URL\n        apk_url, apk_name = get_latest_acurast_lite_apk()\n        \n        # Step 2: Download the APK\n        apk_path = download_apk(apk_url, apk_name)\n        \n        # Step 3: Install on all devices in parallel\n        print()\n        print(\"=\" * 60)\n        print(f\"[*] Installing Acurast Lite on {len(devices)} device(s) in parallel...\")\n        print(\"=\" * 60)\n        print()\n        \n        max_workers = max(1, len(devices))\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            future_to_device = {\n                executor.submit(install_apk_on_device, device_id, apk_path): device_id \n                for device_id in devices\n            }\n            \n            for future in as_completed(future_to_device):\n                device_id = future_to_device[future]\n                try:\n                    result = future.result()\n                    print(result)\n                except Exception as exc:\n                    print(f\"[{device_id}] Generated an exception: {exc}\")\n        \n        # Step 4: Cleanup - remove downloaded APK\n        print()\n        print(\"[*] Cleaning up temporary files...\")\n        if os.path.exists(apk_path):\n            os.unlink(apk_path)\n            print(f\"[✓] Removed temporary APK: {apk_path}\")\n        \n        print()\n        print(\"=\" * 60)\n        print(\"[✓] Acurast Lite installation/update completed on all devices!\")\n        print(\"=\" * 60)\n    \n    except Exception as e:\n        print(f\"[✗] Script failed: {e}\")\n        return\n\nif __name__ == \"__main__\":\n    main()"
}